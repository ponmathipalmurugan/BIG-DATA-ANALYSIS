{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "d61d40fc-6c77-4128-8e71-2d037878a913",
     "showTitle": true,
     "tableResultSettingsMap": {},
     "title": "Import Functions for Data Processing in PySpark"
    }
   },
   "outputs": [],
   "source": [
    "# Importing required functions for data manipulation\n",
    "from pyspark.sql.functions import col, count, udf, when, sum, round\n",
    "from pyspark.sql.types import StringType"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "492b86fb-40d1-4df7-9c49-703bb0e8e2c0",
     "showTitle": true,
     "tableResultSettingsMap": {},
     "title": "Reading CSV File into Spark DataFrame"
    }
   },
   "outputs": [],
   "source": [
    "matches_df=spark.read.csv(\"/FileStore/tables/matches.csv\",header='true', inferSchema='true')\n",
    "deliveries_df=spark.read.csv(\"/FileStore/tables/deliveries.csv\",header='true', inferSchema='true')\n",
    "auction_df=spark.read.csv(\"/FileStore/tables/ipl_2025_auction_players.csv\",header='true', inferSchema='true')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "310b1057-5db1-443e-827c-806e342cacb5",
     "showTitle": true,
     "tableResultSettingsMap": {},
     "title": "Spark Group and Analyze Batsman Statistics"
    }
   },
   "outputs": [],
   "source": [
    "# Group by batter and compute batting statistics\n",
    "batsman_stats_df = deliveries_df.groupBy(\"batter\").agg(\n",
    "    count(\"*\").alias(\"balls_faced\"),  # Count the number of balls faced\n",
    "    sum(col(\"batsman_runs\")).alias(\"total_runs\"),  # Sum the total runs scored\n",
    "    sum((col(\"batsman_runs\") == 4).cast(\"int\")).alias(\"fours\"),  # Count the number of fours\n",
    "    sum((col(\"batsman_runs\") == 6).cast(\"int\")).alias(\"sixes\")  # Count the number of sixes\n",
    ").withColumn(\n",
    "    \"strike_rate\", round((col(\"total_runs\") * 100 / col(\"balls_faced\")), 2)  # Calculate strike rate\n",
    ").withColumn(\n",
    "    \"boundaries\", col(\"fours\") + col(\"sixes\")  # Calculate total boundaries (fours + sixes)\n",
    ").filter(\n",
    "    col(\"balls_faced\") > 50  # Filter out batters who faced more than 50 balls\n",
    ").orderBy(\"strike_rate\", ascending=False)  # Order by strike rate in descending order"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "a2724f02-e55a-453a-bacd-99a62ddfdb54",
     "showTitle": true,
     "tableResultSettingsMap": {},
     "title": "Group and Count Wickets by Bowler in PySpark"
    }
   },
   "outputs": [],
   "source": [
    "# Filter out valid wickets (excluding run outs)\n",
    "valid_wickets_df = deliveries_df.filter(\n",
    "    (col(\"is_wicket\") == 1) & (col(\"dismissal_kind\") != \"run out\")\n",
    ")\n",
    "\n",
    "# Group by bowler and count the number of wickets\n",
    "bowler_wickets_df = valid_wickets_df.groupBy(\"bowler\").agg(count(\"*\").alias(\"wickets\")).orderBy(col(\"wickets\").desc())\n",
    "bowler_wickets_df = bowler_wickets_df.withColumn(\n",
    "    \"bowler\",\n",
    "    when(col(\"bowler\") == \"A Singh\", \"Amit Singh\").otherwise(col(\"bowler\"))\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "722364d2-d468-4c44-96b8-3cbc3da5d162",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "# Filter out valid wickets (excluding run outs)\n",
    "valid_wickets_df = deliveries_df.filter(\n",
    "    (col(\"is_wicket\") == 1) & (col(\"dismissal_kind\") != \"run out\")\n",
    ")\n",
    "\n",
    "# Compute total runs conceded per bowler\n",
    "bowler_stats_df = deliveries_df.groupBy(\"bowler\").agg(\n",
    "    count(when((col(\"is_wicket\") == 1) & (col(\"dismissal_kind\") != \"run out\"), 1)).alias(\"wickets\"),\n",
    "    sum(col(\"total_runs\")).alias(\"runs_conceded\"),\n",
    "    count(when(col(\"ball\") == 6, 1)).alias(\"overs_bowled\")  # Count number of completed overs\n",
    ")\n",
    "\n",
    "# Calculate Economy Rate: runs conceded per over\n",
    "bowler_stats_df = bowler_stats_df.withColumn(\n",
    "    \"economy_rate\", round(col(\"runs_conceded\") / (col(\"overs_bowled\") + 0.1), 2)  # Avoid division by zero\n",
    ").withColumn(\n",
    "    \"bowler\", when(col(\"bowler\") == \"A Singh\", \"Amit Singh\").otherwise(col(\"bowler\"))\n",
    ").orderBy(col(\"wickets\").desc())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "4da2f564-eb03-4ded-8c55-4a1586c339a4",
     "showTitle": true,
     "tableResultSettingsMap": {},
     "title": "Format Player Names and Apply Transformation in PySpark"
    }
   },
   "outputs": [],
   "source": [
    "# UDF to check if the first name is all uppercase\n",
    "def is_all_caps(name):\n",
    "    return name.isupper()  # Check if it's all uppercase\n",
    "\n",
    "# Define UDF to format names correctly\n",
    "def format_name(full_name):\n",
    "    parts = full_name.split()\n",
    "    if is_all_caps(parts[0]):\n",
    "        return f\"{parts[0][0]} {parts[-1]}\"  # Keep only first initial + last name\n",
    "    return full_name  # If there's only one word, return as is\n",
    "\n",
    "format_name_udf = udf(format_name, StringType())\n",
    "\n",
    "# Apply the transformation\n",
    "batsman_stats_final_df = batsman_stats_df.withColumn(\"player\", format_name_udf(col(\"batter\")))\n",
    "\n",
    "bowler_wickets_final_df = bowler_stats_df.withColumn(\"player\", format_name_udf(col(\"bowler\")))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "3d669184-6b81-4baa-9b18-8688aa03c1e1",
     "showTitle": true,
     "tableResultSettingsMap": {},
     "title": "Filter and List Unsold Players in Auction"
    }
   },
   "outputs": [],
   "source": [
    "unsold_players = auction_df.filter(col(\"Sold\") == \"Unsold\").dropDuplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "7aa2e2b9-5d16-4802-97e3-fd619dbc42c7",
     "showTitle": true,
     "tableResultSettingsMap": {},
     "title": "Convert Full Names to Initials and Update DataFrame"
    }
   },
   "outputs": [],
   "source": [
    "# Define a UDF to convert full names to initial-based names\n",
    "def convert_to_initials(full_name):\n",
    "    parts = full_name.split()\n",
    "    if len(parts) > 1:\n",
    "        return f\"{parts[0][0]} {parts[1]}\"  # e.g., \"Travis Head\" â†’ \"TM Head\"\n",
    "    return full_name  # If there's only one name, keep it unchanged\n",
    "\n",
    "convert_to_initials_udf = udf(convert_to_initials, StringType())\n",
    "\n",
    "# Apply transformation to create a new column with formatted names\n",
    "unsold_players_df = unsold_players.withColumn(\"player\", convert_to_initials_udf(col(\"Players\")))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "8fe8038b-3d04-42ed-a52d-7527ee74be59",
     "showTitle": true,
     "tableResultSettingsMap": {},
     "title": "Join Unsold Players with Batsman Stats in PySpark"
    }
   },
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .table-result-container {\n",
       "    max-height: 300px;\n",
       "    overflow: auto;\n",
       "  }\n",
       "  table, th, td {\n",
       "    border: 1px solid black;\n",
       "    border-collapse: collapse;\n",
       "  }\n",
       "  th, td {\n",
       "    padding: 5px;\n",
       "  }\n",
       "  th {\n",
       "    text-align: left;\n",
       "  }\n",
       "</style><div class='table-result-container'><table class='table-result'><thead style='background-color: white'><tr><th>Players</th><th>total_runs</th><th>balls_faced</th><th>strike_rate</th><th>boundaries</th></tr></thead><tbody><tr><td>Shai Hope</td><td>183</td><td>125</td><td>146.4</td><td>24</td></tr><tr><td>Prithvi Shaw</td><td>1892</td><td>1321</td><td>143.22</td><td>299</td></tr><tr><td>Jonny Bairstow</td><td>1589</td><td>1132</td><td>140.37</td><td>235</td></tr><tr><td>Kyle Mayers</td><td>379</td><td>276</td><td>137.32</td><td>60</td></tr><tr><td>David Warner</td><td>6567</td><td>4849</td><td>135.43</td><td>899</td></tr><tr><td>Shardul Thakur</td><td>307</td><td>228</td><td>134.65</td><td>40</td></tr><tr><td>Dewald Brevis</td><td>230</td><td>176</td><td>130.68</td><td>33</td></tr><tr><td>Sarfaraz Khan</td><td>585</td><td>456</td><td>128.29</td><td>77</td></tr><tr><td>Daryl Mitchell</td><td>351</td><td>274</td><td>128.1</td><td>38</td></tr><tr><td>Steven Smith</td><td>2495</td><td>1999</td><td>124.81</td><td>286</td></tr></tbody></table></div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "aggData": [],
       "aggError": "",
       "aggOverflow": false,
       "aggSchema": [],
       "aggSeriesLimitReached": false,
       "aggType": "",
       "arguments": {},
       "columnCustomDisplayInfos": {},
       "data": [
        [
         "Shai Hope",
         183,
         125,
         146.4,
         24
        ],
        [
         "Prithvi Shaw",
         1892,
         1321,
         143.22,
         299
        ],
        [
         "Jonny Bairstow",
         1589,
         1132,
         140.37,
         235
        ],
        [
         "Kyle Mayers",
         379,
         276,
         137.32,
         60
        ],
        [
         "David Warner",
         6567,
         4849,
         135.43,
         899
        ],
        [
         "Shardul Thakur",
         307,
         228,
         134.65,
         40
        ],
        [
         "Dewald Brevis",
         230,
         176,
         130.68,
         33
        ],
        [
         "Sarfaraz Khan",
         585,
         456,
         128.29,
         77
        ],
        [
         "Daryl Mitchell",
         351,
         274,
         128.1,
         38
        ],
        [
         "Steven Smith",
         2495,
         1999,
         124.81,
         286
        ]
       ],
       "datasetInfos": [],
       "dbfsResultPath": null,
       "isJsonSchema": true,
       "metadata": {},
       "overflow": false,
       "plotOptions": {
        "customPlotOptions": {},
        "displayType": "table",
        "pivotAggregation": null,
        "pivotColumns": null,
        "xColumns": null,
        "yColumns": null
       },
       "removedWidgets": [],
       "schema": [
        {
         "metadata": "{}",
         "name": "Players",
         "type": "\"string\""
        },
        {
         "metadata": "{}",
         "name": "total_runs",
         "type": "\"long\""
        },
        {
         "metadata": "{}",
         "name": "balls_faced",
         "type": "\"long\""
        },
        {
         "metadata": "{}",
         "name": "strike_rate",
         "type": "\"double\""
        },
        {
         "metadata": "{}",
         "name": "boundaries",
         "type": "\"long\""
        }
       ],
       "type": "table"
      }
     },
     "output_type": "display_data"
    },
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "Databricks visualization. Run in Databricks to view."
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1.subcommand+json": {
       "baseErrorDetails": null,
       "bindings": {},
       "collapsed": false,
       "command": "%python\n__backend_agg_display_orig = display\n__backend_agg_dfs = []\ndef __backend_agg_display_new(df):\n    __backend_agg_df_modules = [\"pandas.core.frame\", \"databricks.koalas.frame\", \"pyspark.sql.dataframe\", \"pyspark.pandas.frame\", \"pyspark.sql.connect.dataframe\"]\n    if (type(df).__module__ in __backend_agg_df_modules and type(df).__name__ == 'DataFrame') or isinstance(df, list):\n        __backend_agg_dfs.append(df)\n\ndisplay = __backend_agg_display_new\n\ndef __backend_agg_user_code_fn():\n    import base64\n    exec(base64.standard_b64decode(\"IyBKb2luIHRoZSB1bnNvbGQgcGxheWVycyB3aXRoIHRoZSBiYXRzbWFuIHN0YXRzIG9uIHRoZSB0cmFuc2Zvcm1lZCBuYW1lCnVuc29sZF9iYXRzbWVuX3N0YXRzX2RmID0gdW5zb2xkX3BsYXllcnNfZGYuam9pbigKICAgIGJhdHNtYW5fc3RhdHNfZmluYWxfZGYsIG9uPSJwbGF5ZXIiCikuc2VsZWN0KCJQbGF5ZXJzIiwgInRvdGFsX3J1bnMiLCAiYmFsbHNfZmFjZWQiLCAic3RyaWtlX3JhdGUiLCAiYm91bmRhcmllcyIpCgojIFNob3cgdGhlIGZpbmFsIG91dHB1dApkaXNwbGF5KHVuc29sZF9iYXRzbWVuX3N0YXRzX2RmLm9yZGVyQnkoInN0cmlrZV9yYXRlIiwgYXNjZW5kaW5nPUZhbHNlKS5saW1pdCgxMCkpCg==\").decode())\n\ntry:\n    # run user code\n    __backend_agg_user_code_fn()\n\n    #reset display function\n    display = __backend_agg_display_orig\n\n    if len(__backend_agg_dfs) > 0:\n        # create a temp view\n        if type(__backend_agg_dfs[0]).__module__ == \"databricks.koalas.frame\":\n            # koalas dataframe\n            __backend_agg_dfs[0].to_spark().createOrReplaceTempView(\"DatabricksViewf44520c\")\n        elif type(__backend_agg_dfs[0]).__module__ == \"pandas.core.frame\" or isinstance(__backend_agg_dfs[0], list):\n            # pandas dataframe\n            spark.createDataFrame(__backend_agg_dfs[0]).createOrReplaceTempView(\"DatabricksViewf44520c\")\n        else:\n            __backend_agg_dfs[0].createOrReplaceTempView(\"DatabricksViewf44520c\")\n        #run backend agg\n        display(spark.sql(\"\"\"WITH q AS (select * from DatabricksViewf44520c) SELECT `Players`,`strike_rate` FROM q\"\"\"))\n    else:\n        displayHTML(\"dataframe no longer exists. If you're using dataframe.display(), use display(dataframe) instead.\")\n\n\nfinally:\n    spark.sql(\"drop view if exists DatabricksViewf44520c\")\n    display = __backend_agg_display_orig\n    del __backend_agg_display_new\n    del __backend_agg_display_orig\n    del __backend_agg_dfs\n    del __backend_agg_user_code_fn\n\n",
       "commandTitle": "Visualization 1",
       "commandType": "auto",
       "commandVersion": 0,
       "commentThread": [],
       "commentsVisible": false,
       "contentSha256Hex": null,
       "customPlotOptions": {
        "redashChart": [
         {
          "key": "type",
          "value": "CHART"
         },
         {
          "key": "options",
          "value": {
           "alignYAxesAtZero": true,
           "coefficient": 1,
           "columnConfigurationMap": {
            "x": {
             "column": "Players",
             "id": "column_2647586639"
            },
            "y": [
             {
              "column": "strike_rate",
              "id": "column_2647586641"
             }
            ]
           },
           "dateTimeFormat": "DD/MM/YYYY HH:mm",
           "direction": {
            "type": "counterclockwise"
           },
           "error_y": {
            "type": "data",
            "visible": true
           },
           "globalSeriesType": "column",
           "isAggregationOn": false,
           "legend": {
            "traceorder": "normal"
           },
           "missingValuesAsZero": true,
           "numberFormat": "0,0.[00000]",
           "percentFormat": "0[.]00%",
           "series": {
            "error_y": {
             "type": "data",
             "visible": true
            },
            "stacking": null
           },
           "seriesOptions": {
            "strike_rate": {
             "color": "#99DDB4",
             "type": "column",
             "yAxis": 0
            }
           },
           "showDataLabels": false,
           "sizemode": "diameter",
           "sortX": true,
           "sortY": true,
           "swappedAxes": false,
           "textFormat": "",
           "useAggregationsUi": true,
           "valuesOptions": {},
           "version": 2,
           "xAxis": {
            "labels": {
             "enabled": true
            },
            "type": "-"
           },
           "yAxis": [
            {
             "title": {
              "text": "Strike Rate"
             },
             "type": "-"
            },
            {
             "opposite": true,
             "type": "-"
            }
           ]
          }
         }
        ]
       },
       "datasetPreviewNameToCmdIdMap": {},
       "diffDeletes": [],
       "diffInserts": [],
       "displayType": "redashChart",
       "error": null,
       "errorDetails": null,
       "errorSummary": null,
       "errorTraceType": null,
       "finishTime": 0,
       "globalVars": {},
       "guid": "",
       "height": "auto",
       "hideCommandCode": false,
       "hideCommandResult": false,
       "iPythonMetadata": null,
       "inputWidgets": {},
       "isLockedInExamMode": false,
       "latestUser": "a user",
       "latestUserId": null,
       "listResultMetadata": null,
       "metadata": {
        "byteLimit": 2048000,
        "rowLimit": 10000
       },
       "nuid": "bf2de18e-293d-4de4-9864-100ec2dc7fd9",
       "origId": 0,
       "parentHierarchy": [],
       "pivotAggregation": null,
       "pivotColumns": null,
       "position": 7.0,
       "resultDbfsErrorMessage": null,
       "resultDbfsStatus": "INLINED_IN_TREE",
       "results": null,
       "showCommandTitle": false,
       "startTime": 0,
       "state": "finished",
       "streamStates": {},
       "subcommandOptions": {
        "queryPlan": {
         "selects": [
          {
           "column": "Players",
           "type": "column"
          },
          {
           "column": "strike_rate",
           "type": "column"
          }
         ]
        }
       },
       "submitTime": 0,
       "subtype": "tableResultSubCmd.visualization",
       "tableResultIndex": 0,
       "tableResultSettingsMap": {},
       "useConsistentColors": false,
       "version": "CommandV1",
       "width": "auto",
       "workflows": [],
       "xColumns": null,
       "yColumns": null
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Join the unsold players with the batsman stats on the transformed name\n",
    "unsold_batsmen_stats_df = unsold_players_df.join(\n",
    "    batsman_stats_final_df, on=\"player\"\n",
    ").select(\"Players\", \"total_runs\", \"balls_faced\", \"strike_rate\", \"boundaries\")\n",
    "\n",
    "# Show the final output\n",
    "display(unsold_batsmen_stats_df.orderBy(\"strike_rate\", ascending=False).limit(10))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "4c99d35c-6dcc-4fb6-91ed-80bba6713f86",
     "showTitle": true,
     "tableResultSettingsMap": {},
     "title": "Top 10 Unsold Batsmen by Boundaries"
    }
   },
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .table-result-container {\n",
       "    max-height: 300px;\n",
       "    overflow: auto;\n",
       "  }\n",
       "  table, th, td {\n",
       "    border: 1px solid black;\n",
       "    border-collapse: collapse;\n",
       "  }\n",
       "  th, td {\n",
       "    padding: 5px;\n",
       "  }\n",
       "  th {\n",
       "    text-align: left;\n",
       "  }\n",
       "</style><div class='table-result-container'><table class='table-result'><thead style='background-color: white'><tr><th>Players</th><th>total_runs</th><th>balls_faced</th><th>strike_rate</th><th>boundaries</th></tr></thead><tbody><tr><td>David Warner</td><td>6567</td><td>4849</td><td>135.43</td><td>899</td></tr><tr><td>Prithvi Shaw</td><td>1892</td><td>1321</td><td>143.22</td><td>299</td></tr><tr><td>Steven Smith</td><td>2495</td><td>1999</td><td>124.81</td><td>286</td></tr><tr><td>Kane Williamson</td><td>2132</td><td>1734</td><td>122.95</td><td>251</td></tr><tr><td>Jonny Bairstow</td><td>1589</td><td>1132</td><td>140.37</td><td>235</td></tr><tr><td>Sarfaraz Khan</td><td>585</td><td>456</td><td>128.29</td><td>77</td></tr><tr><td>Piyush Chawla</td><td>624</td><td>580</td><td>107.59</td><td>76</td></tr><tr><td>Kyle Mayers</td><td>379</td><td>276</td><td>137.32</td><td>60</td></tr><tr><td>Shardul Thakur</td><td>307</td><td>228</td><td>134.65</td><td>40</td></tr><tr><td>Daryl Mitchell</td><td>351</td><td>274</td><td>128.1</td><td>38</td></tr></tbody></table></div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "aggData": [],
       "aggError": "",
       "aggOverflow": false,
       "aggSchema": [],
       "aggSeriesLimitReached": false,
       "aggType": "",
       "arguments": {},
       "columnCustomDisplayInfos": {},
       "data": [
        [
         "David Warner",
         6567,
         4849,
         135.43,
         899
        ],
        [
         "Prithvi Shaw",
         1892,
         1321,
         143.22,
         299
        ],
        [
         "Steven Smith",
         2495,
         1999,
         124.81,
         286
        ],
        [
         "Kane Williamson",
         2132,
         1734,
         122.95,
         251
        ],
        [
         "Jonny Bairstow",
         1589,
         1132,
         140.37,
         235
        ],
        [
         "Sarfaraz Khan",
         585,
         456,
         128.29,
         77
        ],
        [
         "Piyush Chawla",
         624,
         580,
         107.59,
         76
        ],
        [
         "Kyle Mayers",
         379,
         276,
         137.32,
         60
        ],
        [
         "Shardul Thakur",
         307,
         228,
         134.65,
         40
        ],
        [
         "Daryl Mitchell",
         351,
         274,
         128.1,
         38
        ]
       ],
       "datasetInfos": [],
       "dbfsResultPath": null,
       "isJsonSchema": true,
       "metadata": {},
       "overflow": false,
       "plotOptions": {
        "customPlotOptions": {},
        "displayType": "table",
        "pivotAggregation": null,
        "pivotColumns": null,
        "xColumns": null,
        "yColumns": null
       },
       "removedWidgets": [],
       "schema": [
        {
         "metadata": "{}",
         "name": "Players",
         "type": "\"string\""
        },
        {
         "metadata": "{}",
         "name": "total_runs",
         "type": "\"long\""
        },
        {
         "metadata": "{}",
         "name": "balls_faced",
         "type": "\"long\""
        },
        {
         "metadata": "{}",
         "name": "strike_rate",
         "type": "\"double\""
        },
        {
         "metadata": "{}",
         "name": "boundaries",
         "type": "\"long\""
        }
       ],
       "type": "table"
      }
     },
     "output_type": "display_data"
    },
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "Databricks visualization. Run in Databricks to view."
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1.subcommand+json": {
       "baseErrorDetails": null,
       "bindings": {},
       "collapsed": false,
       "command": "%python\n__backend_agg_display_orig = display\n__backend_agg_dfs = []\ndef __backend_agg_display_new(df):\n    __backend_agg_df_modules = [\"pandas.core.frame\", \"databricks.koalas.frame\", \"pyspark.sql.dataframe\", \"pyspark.pandas.frame\", \"pyspark.sql.connect.dataframe\"]\n    if (type(df).__module__ in __backend_agg_df_modules and type(df).__name__ == 'DataFrame') or isinstance(df, list):\n        __backend_agg_dfs.append(df)\n\ndisplay = __backend_agg_display_new\n\ndef __backend_agg_user_code_fn():\n    import base64\n    exec(base64.standard_b64decode(\"ZGlzcGxheSh1bnNvbGRfYmF0c21lbl9zdGF0c19kZi5vcmRlckJ5KCJib3VuZGFyaWVzIiwgYXNjZW5kaW5nPUZhbHNlKS5saW1pdCgxMCkp\").decode())\n\ntry:\n    # run user code\n    __backend_agg_user_code_fn()\n\n    #reset display function\n    display = __backend_agg_display_orig\n\n    if len(__backend_agg_dfs) > 0:\n        # create a temp view\n        if type(__backend_agg_dfs[0]).__module__ == \"databricks.koalas.frame\":\n            # koalas dataframe\n            __backend_agg_dfs[0].to_spark().createOrReplaceTempView(\"DatabricksView6f87acd\")\n        elif type(__backend_agg_dfs[0]).__module__ == \"pandas.core.frame\" or isinstance(__backend_agg_dfs[0], list):\n            # pandas dataframe\n            spark.createDataFrame(__backend_agg_dfs[0]).createOrReplaceTempView(\"DatabricksView6f87acd\")\n        else:\n            __backend_agg_dfs[0].createOrReplaceTempView(\"DatabricksView6f87acd\")\n        #run backend agg\n        display(spark.sql(\"\"\"WITH q AS (select * from DatabricksView6f87acd) SELECT `Players`,`boundaries` FROM q\"\"\"))\n    else:\n        displayHTML(\"dataframe no longer exists. If you're using dataframe.display(), use display(dataframe) instead.\")\n\n\nfinally:\n    spark.sql(\"drop view if exists DatabricksView6f87acd\")\n    display = __backend_agg_display_orig\n    del __backend_agg_display_new\n    del __backend_agg_display_orig\n    del __backend_agg_dfs\n    del __backend_agg_user_code_fn\n\n",
       "commandTitle": "Visualization 1",
       "commandType": "auto",
       "commandVersion": 0,
       "commentThread": [],
       "commentsVisible": false,
       "contentSha256Hex": null,
       "customPlotOptions": {
        "redashChart": [
         {
          "key": "type",
          "value": "CHART"
         },
         {
          "key": "options",
          "value": {
           "alignYAxesAtZero": true,
           "coefficient": 1,
           "columnConfigurationMap": {
            "x": {
             "column": "Players",
             "id": "column_25f7783e38"
            },
            "y": [
             {
              "column": "boundaries",
              "id": "column_25f7783e37"
             }
            ]
           },
           "dateTimeFormat": "DD/MM/YYYY HH:mm",
           "direction": {
            "type": "counterclockwise"
           },
           "error_y": {
            "type": "data",
            "visible": true
           },
           "globalSeriesType": "column",
           "isAggregationOn": false,
           "legend": {
            "traceorder": "normal"
           },
           "missingValuesAsZero": true,
           "numberFormat": "0,0.[00000]",
           "percentFormat": "0[.]00%",
           "series": {
            "error_y": {
             "type": "data",
             "visible": true
            },
            "stacking": null
           },
           "seriesOptions": {
            "boundaries": {
             "color": "#FCA4A1",
             "type": "column",
             "yAxis": 0
            },
            "total_runs": {
             "type": "column",
             "yAxis": 0
            }
           },
           "showDataLabels": false,
           "sizemode": "diameter",
           "sortX": true,
           "sortY": true,
           "swappedAxes": false,
           "textFormat": "",
           "useAggregationsUi": true,
           "valuesOptions": {},
           "version": 2,
           "xAxis": {
            "labels": {
             "enabled": true
            },
            "type": "-"
           },
           "yAxis": [
            {
             "title": {
              "text": "Boundaries"
             },
             "type": "-"
            },
            {
             "opposite": true,
             "type": "-"
            }
           ]
          }
         }
        ]
       },
       "datasetPreviewNameToCmdIdMap": {},
       "diffDeletes": [],
       "diffInserts": [],
       "displayType": "redashChart",
       "error": null,
       "errorDetails": null,
       "errorSummary": null,
       "errorTraceType": null,
       "finishTime": 0,
       "globalVars": {},
       "guid": "",
       "height": "auto",
       "hideCommandCode": false,
       "hideCommandResult": false,
       "iPythonMetadata": null,
       "inputWidgets": {},
       "isLockedInExamMode": false,
       "latestUser": "a user",
       "latestUserId": null,
       "listResultMetadata": null,
       "metadata": {
        "byteLimit": 2048000,
        "rowLimit": 10000
       },
       "nuid": "03cad6d2-8f00-41c7-99cf-5da0ced68aed",
       "origId": 0,
       "parentHierarchy": [],
       "pivotAggregation": null,
       "pivotColumns": null,
       "position": 7.5,
       "resultDbfsErrorMessage": null,
       "resultDbfsStatus": "INLINED_IN_TREE",
       "results": null,
       "showCommandTitle": false,
       "startTime": 0,
       "state": "finished",
       "streamStates": {},
       "subcommandOptions": {
        "queryPlan": {
         "selects": [
          {
           "column": "Players",
           "type": "column"
          },
          {
           "column": "boundaries",
           "type": "column"
          }
         ]
        }
       },
       "submitTime": 0,
       "subtype": "tableResultSubCmd.visualization",
       "tableResultIndex": 0,
       "tableResultSettingsMap": {},
       "useConsistentColors": false,
       "version": "CommandV1",
       "width": "auto",
       "workflows": [],
       "xColumns": null,
       "yColumns": null
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(unsold_batsmen_stats_df.orderBy(\"boundaries\", ascending=False).limit(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "7a1b00be-c104-4346-bfd4-07e053b345a9",
     "showTitle": true,
     "tableResultSettingsMap": {},
     "title": "Join Unsold Players with Bowlers Stats in PySpark"
    }
   },
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .table-result-container {\n",
       "    max-height: 300px;\n",
       "    overflow: auto;\n",
       "  }\n",
       "  table, th, td {\n",
       "    border: 1px solid black;\n",
       "    border-collapse: collapse;\n",
       "  }\n",
       "  th, td {\n",
       "    padding: 5px;\n",
       "  }\n",
       "  th {\n",
       "    text-align: left;\n",
       "  }\n",
       "</style><div class='table-result-container'><table class='table-result'><thead style='background-color: white'><tr><th>Players</th><th>bowler</th><th>wickets</th><th>economy_rate</th></tr></thead><tbody><tr><td>Piyush Chawla</td><td>PP Chawla</td><td>192</td><td>8.12</td></tr><tr><td>Umesh Yadav</td><td>UT Yadav</td><td>144</td><td>8.74</td></tr><tr><td>Shardul Thakur</td><td>SN Thakur</td><td>94</td><td>9.44</td></tr><tr><td>Murugan Ashwin</td><td>M Ashwin</td><td>35</td><td>8.2</td></tr><tr><td>Chris Jordan</td><td>CJ Jordan</td><td>30</td><td>9.91</td></tr><tr><td>Rishi Dhawan</td><td>R Dhawan</td><td>25</td><td>8.37</td></tr><tr><td>Naveen-ul-Haq</td><td>Naveen-ul-Haq</td><td>25</td><td>9.39</td></tr><tr><td>Alzarri Joseph</td><td>AS Joseph</td><td>21</td><td>9.94</td></tr><tr><td>Chetan Sakariya</td><td>C Sakariya</td><td>20</td><td>8.58</td></tr><tr><td>Jason Behrendorff</td><td>JP Behrendorff</td><td>19</td><td>9.21</td></tr></tbody></table></div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "aggData": [],
       "aggError": "",
       "aggOverflow": false,
       "aggSchema": [],
       "aggSeriesLimitReached": false,
       "aggType": "",
       "arguments": {},
       "columnCustomDisplayInfos": {},
       "data": [
        [
         "Piyush Chawla",
         "PP Chawla",
         192,
         8.12
        ],
        [
         "Umesh Yadav",
         "UT Yadav",
         144,
         8.74
        ],
        [
         "Shardul Thakur",
         "SN Thakur",
         94,
         9.44
        ],
        [
         "Murugan Ashwin",
         "M Ashwin",
         35,
         8.2
        ],
        [
         "Chris Jordan",
         "CJ Jordan",
         30,
         9.91
        ],
        [
         "Rishi Dhawan",
         "R Dhawan",
         25,
         8.37
        ],
        [
         "Naveen-ul-Haq",
         "Naveen-ul-Haq",
         25,
         9.39
        ],
        [
         "Alzarri Joseph",
         "AS Joseph",
         21,
         9.94
        ],
        [
         "Chetan Sakariya",
         "C Sakariya",
         20,
         8.58
        ],
        [
         "Jason Behrendorff",
         "JP Behrendorff",
         19,
         9.21
        ]
       ],
       "datasetInfos": [],
       "dbfsResultPath": null,
       "isJsonSchema": true,
       "metadata": {},
       "overflow": false,
       "plotOptions": {
        "customPlotOptions": {},
        "displayType": "table",
        "pivotAggregation": null,
        "pivotColumns": null,
        "xColumns": null,
        "yColumns": null
       },
       "removedWidgets": [],
       "schema": [
        {
         "metadata": "{}",
         "name": "Players",
         "type": "\"string\""
        },
        {
         "metadata": "{}",
         "name": "bowler",
         "type": "\"string\""
        },
        {
         "metadata": "{}",
         "name": "wickets",
         "type": "\"long\""
        },
        {
         "metadata": "{}",
         "name": "economy_rate",
         "type": "\"double\""
        }
       ],
       "type": "table"
      }
     },
     "output_type": "display_data"
    },
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "Databricks visualization. Run in Databricks to view."
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1.subcommand+json": {
       "baseErrorDetails": null,
       "bindings": {},
       "collapsed": false,
       "command": "%python\n__backend_agg_display_orig = display\n__backend_agg_dfs = []\ndef __backend_agg_display_new(df):\n    __backend_agg_df_modules = [\"pandas.core.frame\", \"databricks.koalas.frame\", \"pyspark.sql.dataframe\", \"pyspark.pandas.frame\", \"pyspark.sql.connect.dataframe\"]\n    if (type(df).__module__ in __backend_agg_df_modules and type(df).__name__ == 'DataFrame') or isinstance(df, list):\n        __backend_agg_dfs.append(df)\n\ndisplay = __backend_agg_display_new\n\ndef __backend_agg_user_code_fn():\n    import base64\n    exec(base64.standard_b64decode(\"IyBKb2luIHRoZSB1bnNvbGQgcGxheWVycyB3aXRoIHRoZSBiYXRzbWFuIHN0YXRzIG9uIHRoZSB0cmFuc2Zvcm1lZCBuYW1lCnVuc29sZF9ib3dsZXJfc3RhdHNfZGYgPSB1bnNvbGRfcGxheWVyc19kZi5qb2luKAogICAgYm93bGVyX3dpY2tldHNfZmluYWxfZGYsIG9uPSJwbGF5ZXIiCikuc2VsZWN0KCJQbGF5ZXJzIiwgImJvd2xlciIsICJ3aWNrZXRzIiwiZWNvbm9teV9yYXRlIikKCiMgU2hvdyB0aGUgZmluYWwgb3V0cHV0CmRpc3BsYXkodW5zb2xkX2Jvd2xlcl9zdGF0c19kZi5vcmRlckJ5KCJ3aWNrZXRzIiwgYXNjZW5kaW5nPUZhbHNlKS5saW1pdCgxMCkp\").decode())\n\ntry:\n    # run user code\n    __backend_agg_user_code_fn()\n\n    #reset display function\n    display = __backend_agg_display_orig\n\n    if len(__backend_agg_dfs) > 0:\n        # create a temp view\n        if type(__backend_agg_dfs[0]).__module__ == \"databricks.koalas.frame\":\n            # koalas dataframe\n            __backend_agg_dfs[0].to_spark().createOrReplaceTempView(\"DatabricksView6ebc9cb\")\n        elif type(__backend_agg_dfs[0]).__module__ == \"pandas.core.frame\" or isinstance(__backend_agg_dfs[0], list):\n            # pandas dataframe\n            spark.createDataFrame(__backend_agg_dfs[0]).createOrReplaceTempView(\"DatabricksView6ebc9cb\")\n        else:\n            __backend_agg_dfs[0].createOrReplaceTempView(\"DatabricksView6ebc9cb\")\n        #run backend agg\n        display(spark.sql(\"\"\"WITH q AS (select * from DatabricksView6ebc9cb) SELECT `Players`,SUM(`wickets`) `column_2647586626` FROM q GROUP BY `Players`\"\"\"))\n    else:\n        displayHTML(\"dataframe no longer exists. If you're using dataframe.display(), use display(dataframe) instead.\")\n\n\nfinally:\n    spark.sql(\"drop view if exists DatabricksView6ebc9cb\")\n    display = __backend_agg_display_orig\n    del __backend_agg_display_new\n    del __backend_agg_display_orig\n    del __backend_agg_dfs\n    del __backend_agg_user_code_fn\n\n",
       "commandTitle": "Visualization 1",
       "commandType": "auto",
       "commandVersion": 0,
       "commentThread": [],
       "commentsVisible": false,
       "contentSha256Hex": null,
       "customPlotOptions": {
        "redashChart": [
         {
          "key": "type",
          "value": "CHART"
         },
         {
          "key": "options",
          "value": {
           "alignYAxesAtZero": true,
           "coefficient": 1,
           "columnConfigurationMap": {
            "x": {
             "column": "Players",
             "id": "column_2647586624"
            },
            "y": [
             {
              "column": "wickets",
              "id": "column_2647586626",
              "transform": "SUM"
             }
            ]
           },
           "dateTimeFormat": "DD/MM/YYYY HH:mm",
           "direction": {
            "type": "counterclockwise"
           },
           "error_y": {
            "type": "data",
            "visible": true
           },
           "globalSeriesType": "column",
           "isAggregationOn": true,
           "legend": {
            "traceorder": "normal"
           },
           "missingValuesAsZero": true,
           "numberFormat": "0,0.[00000]",
           "percentFormat": "0[.]00%",
           "series": {
            "error_y": {
             "type": "data",
             "visible": true
            },
            "stacking": "stack"
           },
           "seriesOptions": {
            "column_2647586626": {
             "name": "wickets",
             "yAxis": 0
            }
           },
           "showDataLabels": false,
           "sizemode": "diameter",
           "sortX": true,
           "sortY": true,
           "swappedAxes": true,
           "textFormat": "",
           "useAggregationsUi": true,
           "valuesOptions": {},
           "version": 2,
           "xAxis": {
            "labels": {
             "enabled": true
            },
            "type": "-"
           },
           "yAxis": [
            {
             "title": {
              "text": "Number of Wickets"
             },
             "type": "-"
            },
            {
             "opposite": true,
             "type": "-"
            }
           ]
          }
         }
        ]
       },
       "datasetPreviewNameToCmdIdMap": {},
       "diffDeletes": [],
       "diffInserts": [],
       "displayType": "redashChart",
       "error": null,
       "errorDetails": null,
       "errorSummary": null,
       "errorTraceType": null,
       "finishTime": 0,
       "globalVars": {},
       "guid": "",
       "height": "auto",
       "hideCommandCode": false,
       "hideCommandResult": false,
       "iPythonMetadata": null,
       "inputWidgets": {},
       "isLockedInExamMode": false,
       "latestUser": "a user",
       "latestUserId": null,
       "listResultMetadata": null,
       "metadata": {
        "byteLimit": 2048000,
        "rowLimit": 10000
       },
       "nuid": "991f4823-6124-4ab3-b624-037906758c40",
       "origId": 0,
       "parentHierarchy": [],
       "pivotAggregation": null,
       "pivotColumns": null,
       "position": 8.0,
       "resultDbfsErrorMessage": null,
       "resultDbfsStatus": "INLINED_IN_TREE",
       "results": null,
       "showCommandTitle": false,
       "startTime": 0,
       "state": "finished",
       "streamStates": {},
       "subcommandOptions": {
        "queryPlan": {
         "groups": [
          {
           "column": "Players",
           "type": "column"
          }
         ],
         "selects": [
          {
           "column": "Players",
           "type": "column"
          },
          {
           "alias": "column_2647586626",
           "args": [
            {
             "column": "wickets",
             "type": "column"
            }
           ],
           "function": "SUM",
           "type": "function"
          }
         ]
        }
       },
       "submitTime": 0,
       "subtype": "tableResultSubCmd.visualization",
       "tableResultIndex": 0,
       "tableResultSettingsMap": {},
       "useConsistentColors": false,
       "version": "CommandV1",
       "width": "auto",
       "workflows": [],
       "xColumns": null,
       "yColumns": null
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Join the unsold players with the batsman stats on the transformed name\n",
    "unsold_bowler_stats_df = unsold_players_df.join(\n",
    "    bowler_wickets_final_df, on=\"player\"\n",
    ").select(\"Players\", \"bowler\", \"wickets\",\"economy_rate\")\n",
    "\n",
    "# Show the final output\n",
    "display(unsold_bowler_stats_df.orderBy(\"wickets\", ascending=False).limit(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "3162f292-abfd-495b-a6b8-1994a2c2fc78",
     "showTitle": true,
     "tableResultSettingsMap": {},
     "title": "Top 10 Economical Bowlers with Over 10 Wickets"
    }
   },
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/html": [
       "<style scoped>\n",
       "  .table-result-container {\n",
       "    max-height: 300px;\n",
       "    overflow: auto;\n",
       "  }\n",
       "  table, th, td {\n",
       "    border: 1px solid black;\n",
       "    border-collapse: collapse;\n",
       "  }\n",
       "  th, td {\n",
       "    padding: 5px;\n",
       "  }\n",
       "  th {\n",
       "    text-align: left;\n",
       "  }\n",
       "</style><div class='table-result-container'><table class='table-result'><thead style='background-color: white'><tr><th>Players</th><th>bowler</th><th>wickets</th><th>economy_rate</th></tr></thead><tbody><tr><td>Piyush Chawla</td><td>PP Chawla</td><td>192</td><td>8.12</td></tr><tr><td>Murugan Ashwin</td><td>M Ashwin</td><td>35</td><td>8.2</td></tr><tr><td>Rishi Dhawan</td><td>R Dhawan</td><td>25</td><td>8.37</td></tr><tr><td>Chetan Sakariya</td><td>C Sakariya</td><td>20</td><td>8.58</td></tr><tr><td>Umesh Yadav</td><td>UT Yadav</td><td>144</td><td>8.74</td></tr><tr><td>Jason Behrendorff</td><td>JP Behrendorff</td><td>19</td><td>9.21</td></tr><tr><td>Naveen-ul-Haq</td><td>Naveen-ul-Haq</td><td>25</td><td>9.39</td></tr><tr><td>Shardul Thakur</td><td>SN Thakur</td><td>94</td><td>9.44</td></tr><tr><td>Chris Jordan</td><td>CJ Jordan</td><td>30</td><td>9.91</td></tr><tr><td>Alzarri Joseph</td><td>AS Joseph</td><td>21</td><td>9.94</td></tr></tbody></table></div>"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "aggData": [],
       "aggError": "",
       "aggOverflow": false,
       "aggSchema": [],
       "aggSeriesLimitReached": false,
       "aggType": "",
       "arguments": {},
       "columnCustomDisplayInfos": {},
       "data": [
        [
         "Piyush Chawla",
         "PP Chawla",
         192,
         8.12
        ],
        [
         "Murugan Ashwin",
         "M Ashwin",
         35,
         8.2
        ],
        [
         "Rishi Dhawan",
         "R Dhawan",
         25,
         8.37
        ],
        [
         "Chetan Sakariya",
         "C Sakariya",
         20,
         8.58
        ],
        [
         "Umesh Yadav",
         "UT Yadav",
         144,
         8.74
        ],
        [
         "Jason Behrendorff",
         "JP Behrendorff",
         19,
         9.21
        ],
        [
         "Naveen-ul-Haq",
         "Naveen-ul-Haq",
         25,
         9.39
        ],
        [
         "Shardul Thakur",
         "SN Thakur",
         94,
         9.44
        ],
        [
         "Chris Jordan",
         "CJ Jordan",
         30,
         9.91
        ],
        [
         "Alzarri Joseph",
         "AS Joseph",
         21,
         9.94
        ]
       ],
       "datasetInfos": [],
       "dbfsResultPath": null,
       "isJsonSchema": true,
       "metadata": {},
       "overflow": false,
       "plotOptions": {
        "customPlotOptions": {},
        "displayType": "table",
        "pivotAggregation": null,
        "pivotColumns": null,
        "xColumns": null,
        "yColumns": null
       },
       "removedWidgets": [],
       "schema": [
        {
         "metadata": "{}",
         "name": "Players",
         "type": "\"string\""
        },
        {
         "metadata": "{}",
         "name": "bowler",
         "type": "\"string\""
        },
        {
         "metadata": "{}",
         "name": "wickets",
         "type": "\"long\""
        },
        {
         "metadata": "{}",
         "name": "economy_rate",
         "type": "\"double\""
        }
       ],
       "type": "table"
      }
     },
     "output_type": "display_data"
    },
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "Databricks visualization. Run in Databricks to view."
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1.subcommand+json": {
       "baseErrorDetails": null,
       "bindings": {},
       "collapsed": false,
       "command": "%python\n__backend_agg_display_orig = display\n__backend_agg_dfs = []\ndef __backend_agg_display_new(df):\n    __backend_agg_df_modules = [\"pandas.core.frame\", \"databricks.koalas.frame\", \"pyspark.sql.dataframe\", \"pyspark.pandas.frame\", \"pyspark.sql.connect.dataframe\"]\n    if (type(df).__module__ in __backend_agg_df_modules and type(df).__name__ == 'DataFrame') or isinstance(df, list):\n        __backend_agg_dfs.append(df)\n\ndisplay = __backend_agg_display_new\n\ndef __backend_agg_user_code_fn():\n    import base64\n    exec(base64.standard_b64decode(\"ZGlzcGxheSh1bnNvbGRfYm93bGVyX3N0YXRzX2RmLmZpbHRlcigid2lja2V0cyA+IDEwIikub3JkZXJCeSgiZWNvbm9teV9yYXRlIikubGltaXQoMTApKQ==\").decode())\n\ntry:\n    # run user code\n    __backend_agg_user_code_fn()\n\n    #reset display function\n    display = __backend_agg_display_orig\n\n    if len(__backend_agg_dfs) > 0:\n        # create a temp view\n        if type(__backend_agg_dfs[0]).__module__ == \"databricks.koalas.frame\":\n            # koalas dataframe\n            __backend_agg_dfs[0].to_spark().createOrReplaceTempView(\"DatabricksView2612deb\")\n        elif type(__backend_agg_dfs[0]).__module__ == \"pandas.core.frame\" or isinstance(__backend_agg_dfs[0], list):\n            # pandas dataframe\n            spark.createDataFrame(__backend_agg_dfs[0]).createOrReplaceTempView(\"DatabricksView2612deb\")\n        else:\n            __backend_agg_dfs[0].createOrReplaceTempView(\"DatabricksView2612deb\")\n        #run backend agg\n        display(spark.sql(\"\"\"WITH q AS (select * from DatabricksView2612deb) SELECT `Players`,`economy_rate` FROM q\"\"\"))\n    else:\n        displayHTML(\"dataframe no longer exists. If you're using dataframe.display(), use display(dataframe) instead.\")\n\n\nfinally:\n    spark.sql(\"drop view if exists DatabricksView2612deb\")\n    display = __backend_agg_display_orig\n    del __backend_agg_display_new\n    del __backend_agg_display_orig\n    del __backend_agg_dfs\n    del __backend_agg_user_code_fn\n\n",
       "commandTitle": "Visualization 1",
       "commandType": "auto",
       "commandVersion": 0,
       "commentThread": [],
       "commentsVisible": false,
       "contentSha256Hex": null,
       "customPlotOptions": {
        "redashChart": [
         {
          "key": "type",
          "value": "CHART"
         },
         {
          "key": "options",
          "value": {
           "alignYAxesAtZero": true,
           "coefficient": 1,
           "columnConfigurationMap": {
            "x": {
             "column": "Players",
             "id": "column_25f7783e46"
            },
            "y": [
             {
              "column": "economy_rate",
              "id": "column_25f7783e45"
             }
            ]
           },
           "dateTimeFormat": "DD/MM/YYYY HH:mm",
           "direction": {
            "type": "counterclockwise"
           },
           "error_y": {
            "type": "data",
            "visible": true
           },
           "globalSeriesType": "column",
           "isAggregationOn": false,
           "legend": {
            "traceorder": "normal"
           },
           "missingValuesAsZero": true,
           "numberFormat": "0,0.[00000]",
           "percentFormat": "0[.]00%",
           "series": {
            "error_y": {
             "type": "data",
             "visible": true
            },
            "stacking": null
           },
           "seriesOptions": {
            "economy_rate": {
             "color": "#00A972",
             "type": "column",
             "yAxis": 0
            },
            "wickets": {
             "type": "column",
             "yAxis": 0
            }
           },
           "showDataLabels": false,
           "sizemode": "diameter",
           "sortX": false,
           "sortY": true,
           "swappedAxes": false,
           "textFormat": "",
           "useAggregationsUi": true,
           "valuesOptions": {},
           "version": 2,
           "xAxis": {
            "labels": {
             "enabled": true
            },
            "type": "-"
           },
           "yAxis": [
            {
             "title": {
              "text": "Economy rate"
             },
             "type": "-"
            },
            {
             "opposite": true,
             "type": "-"
            }
           ]
          }
         }
        ]
       },
       "datasetPreviewNameToCmdIdMap": {},
       "diffDeletes": [],
       "diffInserts": [],
       "displayType": "redashChart",
       "error": null,
       "errorDetails": null,
       "errorSummary": null,
       "errorTraceType": null,
       "finishTime": 0,
       "globalVars": {},
       "guid": "",
       "height": "auto",
       "hideCommandCode": false,
       "hideCommandResult": false,
       "iPythonMetadata": null,
       "inputWidgets": {},
       "isLockedInExamMode": false,
       "latestUser": "a user",
       "latestUserId": null,
       "listResultMetadata": null,
       "metadata": {
        "byteLimit": 2048000,
        "rowLimit": 10000
       },
       "nuid": "ca0091f7-401e-499f-8ecd-cf510930c8a8",
       "origId": 0,
       "parentHierarchy": [],
       "pivotAggregation": null,
       "pivotColumns": null,
       "position": 9.0,
       "resultDbfsErrorMessage": null,
       "resultDbfsStatus": "INLINED_IN_TREE",
       "results": null,
       "showCommandTitle": false,
       "startTime": 0,
       "state": "finished",
       "streamStates": {},
       "subcommandOptions": {
        "queryPlan": {
         "selects": [
          {
           "column": "Players",
           "type": "column"
          },
          {
           "column": "economy_rate",
           "type": "column"
          }
         ]
        }
       },
       "submitTime": 0,
       "subtype": "tableResultSubCmd.visualization",
       "tableResultIndex": 0,
       "tableResultSettingsMap": {},
       "useConsistentColors": false,
       "version": "CommandV1",
       "width": "auto",
       "workflows": [],
       "xColumns": null,
       "yColumns": null
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(unsold_bowler_stats_df.filter(\"wickets > 10\").orderBy(\"economy_rate\").limit(10))"
   ]
  }
 ],
 "metadata": {
  "application/vnd.databricks.v1+notebook": {
   "computePreferences": null,
   "dashboards": [
    {
     "elements": [
      {
       "dashboardResultIndex": null,
       "elementNUID": "991f4823-6124-4ab3-b624-037906758c40",
       "elementType": "command",
       "guid": "12bd0cd2-e21e-43b2-a1fc-859bf3c6aac7",
       "options": null,
       "position": {
        "height": 10,
        "width": 12,
        "x": 0,
        "y": 0,
        "z": null
       },
       "resultIndex": null
      },
      {
       "dashboardResultIndex": null,
       "elementNUID": "bf2de18e-293d-4de4-9864-100ec2dc7fd9",
       "elementType": "command",
       "guid": "d560f91d-6a79-4e55-946c-c41958f63473",
       "options": null,
       "position": {
        "height": 10,
        "width": 12,
        "x": 12,
        "y": 9,
        "z": null
       },
       "resultIndex": null
      },
      {
       "dashboardResultIndex": null,
       "elementNUID": "03cad6d2-8f00-41c7-99cf-5da0ced68aed",
       "elementType": "command",
       "guid": "dacde017-bfaa-4ea2-a533-6402df34f797",
       "options": null,
       "position": {
        "height": 9,
        "width": 12,
        "x": 12,
        "y": 0,
        "z": null
       },
       "resultIndex": null
      },
      {
       "dashboardResultIndex": null,
       "elementNUID": "ca0091f7-401e-499f-8ecd-cf510930c8a8",
       "elementType": "command",
       "guid": "e93cc8c2-6909-488d-9f69-99ed9f892690",
       "options": null,
       "position": {
        "height": 9,
        "width": 12,
        "x": 0,
        "y": 10,
        "z": null
       },
       "resultIndex": null
      }
     ],
     "globalVars": {},
     "guid": "",
     "layoutOption": {
      "grid": true,
      "stack": true
     },
     "nuid": "a83e2848-8e90-4b11-b090-79b6ef6fccbe",
     "origId": 3825319210974564,
     "title": "IPL Unsold Players Stats",
     "version": "DashboardViewV1",
     "width": 1024
    }
   ],
   "environmentMetadata": {
    "base_environment": "",
    "environment_version": "2"
   },
   "language": "python",
   "notebookMetadata": {
    "pythonIndentUnit": 4
   },
   "notebookName": "Untitled Notebook 2025-03-09 19:09:51",
   "widgets": {}
  },
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
